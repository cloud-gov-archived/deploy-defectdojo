---
jobs:

- name: build-defectdojo-release
  plan:
  - in_parallel:
    - get: release-git-repo
      resource: defectdojo-release-git-repo
      trigger: true
    - get: pipeline-tasks
    - get: final-builds-dir-tarball
      resource: defectdojo-final-builds-dir-tarball
    - get: releases-dir-tarball
      resource: defectdojo-releases-dir-tarball
    - get: general-task
  - task: finalize-release
    file: pipeline-tasks/finalize-bosh-release.yml
    tags: [iaas]
    params:
      PRIVATE_YML_CONTENT: |-
        ---
        blobstore:
          options:
            region: ((s3-bosh-blobstore-info.region))
            bucket_name: ((s3-bosh-blobstore-info.bucket_name))
            credentials_source: ((s3-bosh-blobstore-info.credentials_source))
            server_side_encryption: ((s3-bosh-blobstore-info.server_side_encryption))
  - in_parallel:
    - put: defectdojo-release
      tags: [iaas]
      params:
        file: finalized-release/defectdojo-*.tgz
    - put: defectdojo-final-builds-dir-tarball
      tags: [iaas]
      params:
        file: finalized-release/final-builds-dir-defectdojo.tgz
    - put: defectdojo-releases-dir-tarball
      tags: [iaas]
      params:
        file: finalized-release/releases-dir-defectdojo.tgz
  on_failure:
    put: slack
    params: &slack-failure-params
      text: |
        :x: FAILED to build Defect Dojo BOSH release
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-failure-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params: &slack-success-params
      username: ((slack-username))
      icon_url: ((slack-icon-url))
      channel: ((slack-success-channel))
      text: |
        :white_check_mark: Successfully built Defect Dojo BOSH release
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>


- name: deploy-defectdojo-staging
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: deploy-defectdojo-config
    - get: defectdojo-release
    - get: defectdojo-stemcell-jammy
    - get: general-task
  - put: defectdojo-staging-deployment
    params:
      manifest: deploy-defectdojo-config/ci/manifest.yml
      releases:
      - defectdojo-release/*.tgz
      stemcells:
      - defectdojo-stemcell-jammy/*.tgz
      vars_files:
      - deploy-defectdojo-config/varsfiles/staging.yml
  on_success:
    put: slack
    params:
      <<: *slack-success-params
      text: |
        :white_check_mark: Successfully deployed defect dojo on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
  on_failure:
    put: slack
    params:
      <<: *slack-failure-params
      text: |
        :x: FAILED to deploy defect dojo on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>


resources:
- name: defectdojo-release-git-repo
  type: git
  source:
    commit_verification_keys: ((cloud-gov-pgp-keys))
    uri: https://github.com/cloud-gov/defectdojo-boshrelease
    branch: pipeline

- name: defectdojo-final-builds-dir-tarball
  type: s3-iam
  source: &bosh-releases-bucket-info
    bucket: ((s3-bosh-releases-bucket))
    region_name: ((aws-region))
    server_side_encryption: AES256
    versioned_file: final-builds-dir-defectdojo.tgz

- name: defectdojo-releases-dir-tarball
  type: s3-iam
  source:
    <<: *bosh-releases-bucket-info
    versioned_file: releases-dir-defectdojo.tgz
  
- name: defectdojo-release
  type: s3-iam
  source:
    bucket: ((s3-bosh-releases-bucket))
    region_name: ((aws-region))
    regexp: defectdojo-([\d\.]*).tgz
    server_side_encryption: AES256

- name: deploy-defectdojo-config
  type: git
  source:
    commit_verification_keys: ((cloud-gov-pgp-keys))
    uri: https://github.com/cloud-gov/cg-deploy-defectdojo.git
    branch: init

- name: defectdojo-stemcell-jammy
  source:
    name: bosh-aws-xen-hvm-ubuntu-jammy-go_agent
  type: bosh-io-stemcell

- name: pipeline-tasks
  type: git
  source:
    commit_verification_keys: ((cloud-gov-pgp-keys))
    uri: https://github.com/cloud-gov/cg-pipeline-tasks.git
    branch: main

- name: defectdojo-staging-deployment
  type: bosh-deployment
  source: &bosh-params-staging
    target: ((defectdojo-staging-deployment-target))
    client: ci
    client_secret: ((tooling_bosh_uaa_ci_client_secret))
    ca_cert: ((common_ca_cert))
    deployment: defectdojo-staging

- name: slack
  type: slack-notification
  source:
    url: ((slack-webhook-url))

- name: general-task
  type: registry-image
  source:
    aws_access_key_id: ((ecr_aws_key))
    aws_secret_access_key: ((ecr_aws_secret))
    repository: general-task
    aws_region: us-gov-west-1
    tag: latest

resource_types:
- name: registry-image
  type: registry-image
  source:
    aws_access_key_id: ((ecr_aws_key))
    aws_secret_access_key: ((ecr_aws_secret))
    repository: registry-image-resource
    aws_region: us-gov-west-1
    tag: latest

- name: slack-notification
  type: registry-image
  source:
    aws_access_key_id: ((ecr_aws_key))
    aws_secret_access_key: ((ecr_aws_secret))
    repository: slack-notification-resource
    aws_region: us-gov-west-1
    tag: latest

- name: bosh-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource

- name: s3-iam
  type: registry-image
  source:
    aws_access_key_id: ((ecr_aws_key))
    aws_secret_access_key: ((ecr_aws_secret))
    repository: s3-resource
    aws_region: us-gov-west-1
    tag: latest
